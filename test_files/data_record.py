# import numpy as np
import torch
# Low_data_filter = [0.04466212913393974, 0.0447833351790905, 0.04467253386974335, 0.04470682516694069, 0.04474565386772156, 0.04466433450579643, 0.04455120116472244, 0.044625233858823776, 0.04476560279726982, 0.04475795850157738, 0.04455752670764923, 0.04465217888355255, 0.044622983783483505, 0.04471088573336601, 0.04464472457766533, 0.044643063098192215, 0.0447259396314621, 0.04462594538927078, 0.04468227177858353, 0.044604115188121796, 0.04470713809132576, 0.044771287590265274, 0.04470391571521759, 0.044675521552562714, 0.04447660222649574, 0.044579267501831055, 0.04438416659832001, 0.043806128203868866, 0.04346182942390442, 0.04242181405425072, 0.04049200564622879, 0.03666548803448677]
# Low_data_filter = np.array(Low_data_filter)
# Low_data_filter -= min(Low_data_filter)
# Low_data_filter /= max(Low_data_filter)
# print(Low_data_filter)
# max(Low_data_filter)
# 对于lstm的longtime module可以经过lfp对当前赋予更小的权重，防止冗余

Low_data_filter = torch.tensor([0.9850691885432546, 1.0, 0.9863508997677042, 0.9905750858833712, 0.9953582137360162, 0.9853408580902916, 0.9714044856680547, 0.9805242304455288, 0.9978156299934193, 0.9968739646040279, 0.9721837000107383, 0.9838434632727553, 0.9802470540833493, 0.9910752882588276, 0.98292520184772, 0.9827205318849186, 0.9929297082581118, 0.9806118805865492, 0.987550467666276, 0.9779227191918932, 0.9906136335893696, 0.9985159133190584, 0.9902166839978377, 0.9867189385797374, 0.9622149878987737, 0.974861847775109, 0.9508282708875793, 0.8796223976856692, 0.8372098252595775, 0.7090951476698371, 0.47137098587593695, 0.1])
